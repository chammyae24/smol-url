create table "public"."clicks" (
    "id" bigint generated by default as identity not null,
    "code" text not null,
    "user_agent" text,
    "ip_address" text,
    "clicked_at" timestamp with time zone not null default now()
);


alter table "public"."clicks" enable row level security;

create table "public"."urls" (
    "id" uuid not null default gen_random_uuid(),
    "short_code" text not null,
    "destination_url" text,
    "custom_domain" text,
    "url_params" jsonb default '{}'::jsonb,
    "click_count" bigint default '0'::bigint,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."urls" enable row level security;

create table "public"."user_urls" (
    "user_id" uuid not null,
    "short_code" text not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."user_urls" enable row level security;

create table "public"."users" (
    "id" uuid not null default auth.uid(),
    "full_name" text,
    "avatar_url" text,
    "email" text,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."users" enable row level security;

CREATE UNIQUE INDEX clicks_pkey ON public.clicks USING btree (id);

CREATE UNIQUE INDEX urls_pkey ON public.urls USING btree (id, short_code);

CREATE UNIQUE INDEX urls_short_code_key ON public.urls USING btree (short_code);

CREATE UNIQUE INDEX user_urls_pkey ON public.user_urls USING btree (user_id, short_code);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id);

alter table "public"."clicks" add constraint "clicks_pkey" PRIMARY KEY using index "clicks_pkey";

alter table "public"."urls" add constraint "urls_pkey" PRIMARY KEY using index "urls_pkey";

alter table "public"."user_urls" add constraint "user_urls_pkey" PRIMARY KEY using index "user_urls_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."clicks" add constraint "public_clicks_code_fkey" FOREIGN KEY (code) REFERENCES urls(short_code) not valid;

alter table "public"."clicks" validate constraint "public_clicks_code_fkey";

alter table "public"."urls" add constraint "urls_short_code_key" UNIQUE using index "urls_short_code_key";

alter table "public"."user_urls" add constraint "public_user_urls_short_code_fkey" FOREIGN KEY (short_code) REFERENCES urls(short_code) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user_urls" validate constraint "public_user_urls_short_code_fkey";

alter table "public"."user_urls" add constraint "public_user_urls_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user_urls" validate constraint "public_user_urls_user_id_fkey";

grant delete on table "public"."clicks" to "anon";

grant insert on table "public"."clicks" to "anon";

grant references on table "public"."clicks" to "anon";

grant select on table "public"."clicks" to "anon";

grant trigger on table "public"."clicks" to "anon";

grant truncate on table "public"."clicks" to "anon";

grant update on table "public"."clicks" to "anon";

grant delete on table "public"."clicks" to "authenticated";

grant insert on table "public"."clicks" to "authenticated";

grant references on table "public"."clicks" to "authenticated";

grant select on table "public"."clicks" to "authenticated";

grant trigger on table "public"."clicks" to "authenticated";

grant truncate on table "public"."clicks" to "authenticated";

grant update on table "public"."clicks" to "authenticated";

grant delete on table "public"."clicks" to "service_role";

grant insert on table "public"."clicks" to "service_role";

grant references on table "public"."clicks" to "service_role";

grant select on table "public"."clicks" to "service_role";

grant trigger on table "public"."clicks" to "service_role";

grant truncate on table "public"."clicks" to "service_role";

grant update on table "public"."clicks" to "service_role";

grant delete on table "public"."urls" to "anon";

grant insert on table "public"."urls" to "anon";

grant references on table "public"."urls" to "anon";

grant select on table "public"."urls" to "anon";

grant trigger on table "public"."urls" to "anon";

grant truncate on table "public"."urls" to "anon";

grant update on table "public"."urls" to "anon";

grant delete on table "public"."urls" to "authenticated";

grant insert on table "public"."urls" to "authenticated";

grant references on table "public"."urls" to "authenticated";

grant select on table "public"."urls" to "authenticated";

grant trigger on table "public"."urls" to "authenticated";

grant truncate on table "public"."urls" to "authenticated";

grant update on table "public"."urls" to "authenticated";

grant delete on table "public"."urls" to "service_role";

grant insert on table "public"."urls" to "service_role";

grant references on table "public"."urls" to "service_role";

grant select on table "public"."urls" to "service_role";

grant trigger on table "public"."urls" to "service_role";

grant truncate on table "public"."urls" to "service_role";

grant update on table "public"."urls" to "service_role";

grant delete on table "public"."user_urls" to "anon";

grant insert on table "public"."user_urls" to "anon";

grant references on table "public"."user_urls" to "anon";

grant select on table "public"."user_urls" to "anon";

grant trigger on table "public"."user_urls" to "anon";

grant truncate on table "public"."user_urls" to "anon";

grant update on table "public"."user_urls" to "anon";

grant delete on table "public"."user_urls" to "authenticated";

grant insert on table "public"."user_urls" to "authenticated";

grant references on table "public"."user_urls" to "authenticated";

grant select on table "public"."user_urls" to "authenticated";

grant trigger on table "public"."user_urls" to "authenticated";

grant truncate on table "public"."user_urls" to "authenticated";

grant update on table "public"."user_urls" to "authenticated";

grant delete on table "public"."user_urls" to "service_role";

grant insert on table "public"."user_urls" to "service_role";

grant references on table "public"."user_urls" to "service_role";

grant select on table "public"."user_urls" to "service_role";

grant trigger on table "public"."user_urls" to "service_role";

grant truncate on table "public"."user_urls" to "service_role";

grant update on table "public"."user_urls" to "service_role";

grant delete on table "public"."users" to "anon";

grant insert on table "public"."users" to "anon";

grant references on table "public"."users" to "anon";

grant select on table "public"."users" to "anon";

grant trigger on table "public"."users" to "anon";

grant truncate on table "public"."users" to "anon";

grant update on table "public"."users" to "anon";

grant delete on table "public"."users" to "authenticated";

grant insert on table "public"."users" to "authenticated";

grant references on table "public"."users" to "authenticated";

grant select on table "public"."users" to "authenticated";

grant trigger on table "public"."users" to "authenticated";

grant truncate on table "public"."users" to "authenticated";

grant update on table "public"."users" to "authenticated";

grant delete on table "public"."users" to "service_role";

grant insert on table "public"."users" to "service_role";

grant references on table "public"."users" to "service_role";

grant select on table "public"."users" to "service_role";

grant trigger on table "public"."users" to "service_role";

grant truncate on table "public"."users" to "service_role";

grant update on table "public"."users" to "service_role";

create policy "Enable insert access to anon users"
on "public"."clicks"
as permissive
for insert
to anon
with check (true);


create policy "Enable insert for auth users"
on "public"."urls"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for auth user"
on "public"."urls"
as permissive
for select
to authenticated
using (true);


create policy "Enable update for click count only"
on "public"."urls"
as permissive
for update
to anon
using (true)
with check ((jsonb_build_object('click_count', click_count) = jsonb_build_object('click_count', click_count)));


create policy "Enable to insert own row"
on "public"."user_urls"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable to read own row"
on "public"."user_urls"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));



